
function! DoRemote(arg)
  UpdateRemotePlugins
endfunction

call plug#begin('~/.nvim/plugged')

Plug 'https://github.com/vim-scripts/a.vim.git'
Plug 'https://github.com/eparreno/vim-l9.git'
Plug 'https://github.com/nathanaelkane/vim-indent-guides.git'
Plug 'https://github.com/Shougo/vimproc.git', { 'do': 'make' }
Plug 'https://github.com/eagletmt/ghcmod-vim.git'
Plug 'https://github.com/godlygeek/tabular.git'
Plug 'https://github.com/scrooloose/nerdcommenter.git'
Plug 'https://github.com/tpope/vim-repeat.git'
Plug 'https://github.com/tpope/vim-surround.git'
Plug 'https://github.com/michaeljsmith/vim-indent-object.git'
Plug 'https://github.com/wlangstroth/vim-racket.git'
Plug 'https://github.com/rust-lang/rust.vim.git'
Plug 'https://github.com/octol/vim-cpp-enhanced-highlight.git'
Plug 'https://github.com/neovimhaskell/haskell-vim.git'
Plug 'https://github.com/bitc/vim-hdevtools.git'
Plug 'https://github.com/tpope/vim-vinegar.git'
Plug 'https://github.com/Shougo/deoplete.nvim.git', { 'do': function('DoRemote') }
Plug 'https://github.com/mbbill/undotree.git'
Plug 'https://github.com/tpope/vim-obsession.git'
Plug 'https://github.com/reedes/vim-wordy.git'
Plug 'https://github.com/tpope/vim-fugitive.git'
Plug 'https://github.com/zchee/deoplete-jedi.git'
Plug 'https://github.com/davidhalter/jedi-vim.git'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Note taking plugins
Plug 'vimwiki/vimwiki'
Plug 'https://github.com/michal-h21/vim-zettel.git'

" Colorscheme bundles
Plug 'https://github.com/flazz/vim-colorschemes.git'
Plug 'https://github.com/chriskempson/base16-vim.git'
Plug 'https://github.com/morhetz/gruvbox.git'

Plug 'https://github.com/vim-scripts/SyntaxRange.git'
Plug 'https://github.com/junegunn/goyo.vim.git'
Plug 'https://github.com/tpope/vim-markdown.git'


call plug#end()

" Tab settings
" set cindent
set autoindent
set smartindent
set expandtab
set tabstop=4
set shiftwidth=4

syntax on
filetype plugin on
filetype indent on

set termguicolors

let g:gruvbox_italics=1
let g:gruvbox_invert_selection=0
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_contrast_light='medium'
let g:gruvbox_guisp_fallback='fg'
set background=dark
colorscheme gruvbox

" Search options
set hlsearch
set incsearch
set ignorecase
set smartcase
set inccommand=nosplit

set encoding=utf-8
set scrolloff=3
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ruler
set backspace=indent,eol,start
set laststatus=2
set number
set virtualedit=all

set modelines=0
set wrap
set textwidth=80
set formatoptions=qrn1
set colorcolumn=85
set title
set lazyredraw
set splitright
set splitbelow

" Don't move the cursor to the first column during row traversals
set nostartofline

" Configure diff algorithm to be a little more ergonomic
set diffopt+=algorithm:histogram,indent-heuristic

" Backup & Undo settings
set undodir=~/.nvim/undodir//
set backupdir=~/.nvim/backup//
set undofile
set undolevels=1000
set undoreload=10000

set ssop-=options   " do not store global and local values in session
set ssop-=folds     " do not store folds in the session

" Navigation of folded lines
map j gj
map k gk

" Quick navigation of tabs
map <leader>th :tabprev<CR>
map <leader>tl :tabnext<CR>
map <leader>tn :tabnew<CR>
map <leader>td :tabclose<CR>

" Fold based on the syntax of the file, but only fold the outer level
set foldnestmax=1
set foldmethod=syntax

let g:fastfold_fold_command_suffixes = []

" Press Space to turn off highlighting and clear any message already displayed.
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
nnoremap ' `
nnoremap ` '

" Remove menu
set go=c

" Faster way to switch between splits
map <leader>w <C-w>w
map <leader>h <C-w>h
map <leader>j <C-w>j
map <leader>k <C-w>k
map <leader>l <C-w>l

" Some options for word processing
autocmd BufRead *\.txt setlocal formatoptions+=l
autocmd BufRead *\.txt setlocal lbr
autocmd BufRead *\.txt setlocal spell spelllang=en_us

" some options for pentadactyl text areas
autocmd BufRead *\.tmp setlocal formatoptions+=l
autocmd BufRead *\.tmp setlocal lbr
autocmd BufRead *\.tmp setlocal spell spelllang=en_us

" Spell checking for latex files
autocmd BufRead *\.tex setlocal spell spelllang=en_us

" Load latex even for empty files
let g:vimtex_fold_enabled=1
let g:vimtex_view_method='zathura'
autocmd BufRead *\.tex setlocal iskeyword+=:
map ,p :!xelatex -shell-escape interaction=nonstopmode %<CR>
map ,b :!bibtex %<CR>

" Remove trailing whitespace
function! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

map <silent> <leader>s :call StripTrailingWhitespaces() <CR>

" Complete options (disable preview scratch window)
set completeopt=menu,menuone,longest

" Limit popup menu height
set pumheight=15

" Key Maps
" --------
" Use Y to copy until the end of the line. Use yy to copy the whole line.
nnoremap Y y$

set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%5*%{&ff}%*            "file format
set statusline +=%3*%y%*                "file type
set statusline +=%4*\ %<%F%*            "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%6v\ %*             "virtual column number
set statusline +=%2*0x%04B\ %*          "character under cursor

set list
set listchars=tab:>-,trail:Â·,extends:>,precedes:<

" Interrobangs...
digraph !? 8253
digraph ?! 8253

set tags=./tags;

" {{{ Terminal mode configuration
let g:terminal_color_0  = '#282828'
let g:terminal_color_1  = '#cc241d'
let g:terminal_color_2  = '#98971a'
let g:terminal_color_3  = '#d79921'
let g:terminal_color_4  = '#458588'
let g:terminal_color_5  = '#b16286'
let g:terminal_color_6  = '#689d6a'
let g:terminal_color_7  = '#a89984'
let g:terminal_color_8  = '#928374'
let g:terminal_color_9  = '#fb4934'
let g:terminal_color_10 = '#b8bb26'
let g:terminal_color_11 = '#fabd2f'
let g:terminal_color_12 = '#83a598'
let g:terminal_color_13 = '#d3869b'
let g:terminal_color_14 = '#8ec07c'
let g:terminal_color_15 = '#ebdbb2'
let g:terminal_scrollback_buffer_size=100000
tnoremap <Leader><ESC> <C-\><C-n>
tnoremap <Leader>w <C-\><C-n><C-w>w
highlight TermCursor guifg=#cc241d
" }}}

" {{{ netrw configuration
let g:netrw_liststyle=3
let g:netrw_winsize=10
let g:netrw_alto=1
" }}}

" Deoplete configuration
let g:deoplete#enable_at_startup = 1

nnoremap gb :ls<CR>:buffer<Space>
nnoremap gB :ls<CR>:sbuffer<Space>
nnoremap ,b :buffer *
nnoremap ,B :sbuffer *

" {{{ Haskell configuration
let g:haskell_indent_where = 2
let g:haskell_indent_if = 0
let g:haskell_indent_in = 0
let g:haskell_indent_guard = 2
let g:haskell_enable_quantification = 1
let g:haskell_enable_recursivedo = 1
let g:haskell_enable_arrowsyntax = 1
let g:haskell_enable_pattern_synonyms = 1
let g:haskell_enable_typeroles = 1
let g:haskell_enable_static_pointers = 1
let g:haskell_classic_highlighting = 1
let g:haskell_indent_disable = 1
" }}}


" {{{ Delete old undo files
let s:undos = split(globpath(&undodir, '*'), "\n")
call filter(s:undos, 'getftime(v:val) < localtime() - (60 * 60 * 24 * 90)')
call map(s:undos, 'delete(v:val)')
" }}}

" {{{ Support for opening large files more quickly
" file is large from 20mb
let g:LargeFile = 1024 * 1024 * 20
augroup LargeFile 
 autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
augroup END

function LargeFile()
 " no syntax highlighting etc
 set eventignore+=FileType
 " save memory when other file is viewed
 setlocal bufhidden=unload
 " is read-only (write with :w new_filename)
 setlocal buftype=nowrite
 " no undo possible
 setlocal undolevels=-1
 " display message
 autocmd VimEnter *  echo "The file is larger than " . (g:LargeFile / 1024 / 1024) . " MB, so some options are changed (see .vimrc for details)."
endfunction
" }}}

" Wiki Configuration
let g:vimwiki_list = [{"path":"~/Notes/vimwiki/"}]
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'haskell']
