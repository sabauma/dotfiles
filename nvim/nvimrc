
function! DoRemote(arg)
  UpdateRemotePlugins
endfunction

call plug#begin('~/.nvim/plugged')

Plug 'https://github.com/vim-scripts/a.vim.git'
Plug 'https://github.com/eparreno/vim-l9.git'
Plug 'https://github.com/nathanaelkane/vim-indent-guides.git'
Plug 'https://github.com/Shougo/vimproc.git', { 'do': 'make' }
Plug 'https://github.com/eagletmt/ghcmod-vim.git'
Plug 'https://github.com/godlygeek/tabular.git'
Plug 'https://github.com/scrooloose/nerdcommenter.git'
Plug 'https://github.com/tpope/vim-repeat.git'
Plug 'https://github.com/tpope/vim-surround.git'
Plug 'https://github.com/michaeljsmith/vim-indent-object.git'
Plug 'https://github.com/rust-lang/rust.vim.git'
Plug 'https://github.com/octol/vim-cpp-enhanced-highlight.git'
Plug 'https://github.com/tpope/vim-vinegar.git'
Plug 'https://github.com/mbbill/undotree.git'
Plug 'https://github.com/tpope/vim-obsession.git'
Plug 'https://github.com/tpope/vim-fugitive.git'
Plug 'https://github.com/davidhalter/jedi-vim.git'

" TreeSitter related plugins
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'https://github.com/lewis6991/spellsitter.nvim.git'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Colorscheme bundles
Plug 'https://github.com/flazz/vim-colorschemes.git'
Plug 'https://github.com/morhetz/gruvbox.git'
Plug 'https://github.com/sainnhe/everforest.git'

Plug 'https://github.com/junegunn/goyo.vim.git'
Plug 'https://github.com/tpope/vim-markdown.git'

" nvim-cmp
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-buffer'

" Telescope plugins
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

" Neorg related
Plug 'folke/zen-mode.nvim'
Plug 'nvim-neorg/neorg', { 'branch': 'main' } | Plug 'nvim-lua/plenary.nvim'
Plug 'https://github.com/nvim-neorg/neorg-telescope.git'
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-telescope/telescope-media-files.nvim'

" For LLVM and MLIR Syntax files
Plug 'https://github.com/llvm/llvm-project.git', { 'rtp': 'mlir/utils/vim' }
Plug 'https://github.com/llvm/llvm-project.git', { 'as': 'llvm-project2', 'rtp': 'llvm/utils/vim' }

" For neo-tree
Plug 'kyazdani42/nvim-web-devicons'
Plug 'MunifTanjim/nui.nvim'
Plug 'nvim-neo-tree/neo-tree.nvim'

Plug 'ggandor/lightspeed.nvim'

call plug#end()

" Tab settings
" set cindent
set autoindent
set smartindent
set expandtab
set tabstop=2
set shiftwidth=2
set conceallevel=0

syntax on
filetype plugin on
filetype indent on

set termguicolors

let g:everforest_background = 'hard'
let g:gruvbox_italics=1
let g:gruvbox_invert_selection=0
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_contrast_light='medium'
let g:gruvbox_guisp_fallback='fg'
set background=dark
colorscheme gruvbox

" Search options
set hlsearch
set incsearch
set ignorecase
set smartcase
set inccommand=nosplit

set encoding=utf-8
set scrolloff=3
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ruler
set backspace=indent,eol,start
set laststatus=2
set number
set virtualedit=all

set modelines=0
set wrap
set textwidth=90
set formatoptions=qrn1
set colorcolumn=90
set title
set lazyredraw
set splitright
set splitbelow

" Don't move the cursor to the first column during row traversals
set nostartofline

" Configure diff algorithm to be a little more ergonomic
set diffopt+=algorithm:histogram,indent-heuristic

" Backup & Undo settings
set undodir=~/.nvim/undodir//
set backupdir=~/.nvim/backup//
set undofile
set undolevels=1000
set undoreload=10000

set ssop-=options   " do not store global and local values in session
set ssop-=folds     " do not store folds in the session

" Navigation of folded lines
map j gj
map k gk

" Fold based on the syntax of the file, but only fold the outer level
set foldnestmax=1
set foldmethod=syntax

" Press Space to turn off highlighting and clear any message already displayed.
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
nnoremap ' `
nnoremap ` '

" Remove menu
set go=c

" Faster way to switch between splits
map <leader>w <C-w>w
map <leader>h <C-w>h
map <leader>j <C-w>j
map <leader>k <C-w>k
map <leader>l <C-w>l

" Quick navigation of tabs
map <leader>th :tabprev<CR>
map <leader>tl :tabnext<CR>
map <leader>tn :tabnew<CR>
map <leader>td :tabclose<CR>

" Remove trailing whitespace
function! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

map <silent> <leader>s :call StripTrailingWhitespaces() <CR>

" Invoke telescope's live-grep
map <silent> <leader>lg :lua require('telescope.builtin').live_grep() <CR>

" Complete options (disable preview scratch window)
set completeopt=menu,menuone,longest

" Limit popup menu height
set pumheight=15

" Key Maps
" --------
" Use Y to copy until the end of the line. Use yy to copy the whole line.
nnoremap Y y$

set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%5*%{&ff}%*            "file format
set statusline +=%3*%y%*                "file type
set statusline +=%4*\ %<%F%*            "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%6v\ %*             "virtual column number
set statusline +=%2*0x%04B\ %*          "character under cursor

set list
set listchars=tab:>-,trail:Â·,extends:>,precedes:<

" Interrobangs...
digraph !? 8253
digraph ?! 8253

set tags=./tags;

" {{{ Terminal mode configuration
let g:terminal_color_0  = '#282828'
let g:terminal_color_1  = '#cc241d'
let g:terminal_color_2  = '#98971a'
let g:terminal_color_3  = '#d79921'
let g:terminal_color_4  = '#458588'
let g:terminal_color_5  = '#b16286'
let g:terminal_color_6  = '#689d6a'
let g:terminal_color_7  = '#a89984'
let g:terminal_color_8  = '#928374'
let g:terminal_color_9  = '#fb4934'
let g:terminal_color_10 = '#b8bb26'
let g:terminal_color_11 = '#fabd2f'
let g:terminal_color_12 = '#83a598'
let g:terminal_color_13 = '#d3869b'
let g:terminal_color_14 = '#8ec07c'
let g:terminal_color_15 = '#ebdbb2'
let g:terminal_scrollback_buffer_size=100000
tnoremap <Leader><ESC> <C-\><C-n>
tnoremap <Leader>w <C-\><C-n><C-w>w
highlight TermCursor guifg=#cc241d
" }}}

lua << EOF
    local parser_configs = require('nvim-treesitter.parsers').get_parser_configs()

    parser_configs.norg = {
        install_info = {
            url = "https://github.com/nvim-neorg/tree-sitter-norg",
            files = { "src/parser.c", "src/scanner.cc" },
            branch = "main"
        },
    }

    parser_configs.norg_meta = {
        install_info = {
            url = "https://github.com/nvim-neorg/tree-sitter-norg-meta",
            files = { "src/parser.c" },
            branch = "main"
        },
    }

    parser_configs.norg_table = {
        install_info = {
            url = "https://github.com/nvim-neorg/tree-sitter-norg-table",
            files = { "src/parser.c" },
            branch = "main"
        },
    }

    require('nvim-treesitter.configs').setup {
        --ensure_installed = { "norg", "norg_meta", "norg_table", "haskell", "cpp", "c", "javascript", "vim", "lua" },
        ensure_installed = "all",
        ignore_install = {}, -- List of parsers to ignore installing
        highlight = {
          enable = true,              -- false will disable the whole extension
          disable = {},  -- list of language that will be disabled
          -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
          -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
          -- Using this option may slow down your editor, and you may see some duplicate highlights.
          -- Instead of true it can also be a list of languages
          additional_vim_regex_highlighting = true,
        },
    }

    require('neorg').setup {
        -- Tell Neorg what modules to load
        load = {
            ["core.defaults"] = {}, -- Load all the default modules
            ["core.norg.concealer"] = {
                config = {
                    markup = {
                        enabled = true
                    },
                }
            }, -- Allows for use of icons
            ["core.norg.completion"] = {
                config = {
                    engine = "nvim-cmp" -- We current support nvim-compe and nvim-cmp only
                }
            },
            ["core.presenter"] = {
                config = {
                    zen_mode = "zen-mode"
                },
            },
            ["core.norg.dirman"] = {
                config = {
                  workspaces = {
                    work = "~/Notes/work",
                    personal = "~/Notes/personal"
                  }
                }
            },
            ["core.integrations.telescope"] = {}, -- Enable the telescope module
            ["core.gtd.base"] = {
                config = {
                    workspace = "default"
                },
                projects = {
                    show_completed_projectes = false,
                    show_projects_without_tasks = false
                }
            },
            ["core.gtd.ui"] = {},
            ["core.keybinds"] = { -- Configure core.keybinds
                config = {
                  default_keybinds = true, -- Generate the default keybinds
                  neorg_leader = "<Leader>o" -- This is the default if unspecified
                }
            },
            ["core.norg.qol.toc"] = { },
            ["core.export"] = { },
            ["core.export.markdown"] = {
                config = {
                    extensions = "all",
                }
            },
        },
    }

    -- Setup nvim-cmp.
    local cmp = require'cmp'

    cmp.setup({
      snippet = { },
      mapping = {
        ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
        ['<C-e>'] = cmp.mapping({
          i = cmp.mapping.abort(),
          c = cmp.mapping.close(),
        }),
      },
      sources = cmp.config.sources({
        { name = 'neorg' },
        { name = 'buffer' }
      }, {
        { name = 'buffer' },
      })
    })

    require('telescope').setup({})

    require('telescope').load_extension('media_files')
    require('spellsitter').setup {
      enable = true,
    }

  require("neo-tree").setup{ }

  require("zen-mode").setup {
    window = {
      width = 90,
      options = {
        number = false
      }
    }
  }
EOF
