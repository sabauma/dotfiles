
function! DoRemote(arg)
  UpdateRemotePlugins
endfunction

call plug#begin('~/.nvim/plugged')

Plug 'https://github.com/vim-scripts/a.vim.git'
Plug 'https://github.com/eparreno/vim-l9.git'
Plug 'https://github.com/Shougo/vimproc.git', { 'do': 'make' }
Plug 'https://github.com/eagletmt/ghcmod-vim.git'
Plug 'https://github.com/godlygeek/tabular.git'
Plug 'https://github.com/scrooloose/nerdcommenter.git'
Plug 'https://github.com/tpope/vim-repeat.git'
Plug 'https://github.com/tpope/vim-surround.git'
Plug 'https://github.com/michaeljsmith/vim-indent-object.git'
Plug 'https://github.com/neovimhaskell/haskell-vim.git'
Plug 'https://github.com/mbbill/undotree.git'
Plug 'https://github.com/tpope/vim-obsession.git'
Plug 'https://github.com/nfvs/vim-perforce.git'
Plug 'https://github.com/llvm/llvm-project.git', { 'rtp': 'mlir/utils/vim' }
Plug 'https://github.com/llvm/llvm-project.git', { 'as': 'llvm-project2', 'rtp': 'llvm/utils/vim' }

Plug 'itchyny/lightline.vim'

" coc.nvim
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'jackguo380/vim-lsp-cxx-highlight'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Colorscheme bundles
Plug 'https://github.com/flazz/vim-colorschemes.git'
Plug 'https://github.com/morhetz/gruvbox.git'
Plug 'https://github.com/sainnhe/everforest.git'

" Deoplete and sources
Plug 'https://github.com/Shougo/deoplete.nvim.git', { 'do': function('DoRemote') }

Plug 'christoomey/vim-tmux-navigator'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'https://github.com/lewis6991/spellsitter.nvim.git'

" Telescope plugins
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

" Neorg related plugins
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-buffer'

" Neorg related
Plug 'folke/zen-mode.nvim'
Plug 'nvim-neorg/neorg', { 'branch': 'main' } | Plug 'nvim-lua/plenary.nvim'
Plug 'https://github.com/nvim-neorg/neorg-telescope.git'
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-telescope/telescope-media-files.nvim'

" For neo-tree
Plug 'kyazdani42/nvim-web-devicons'
Plug 'MunifTanjim/nui.nvim'
Plug 'nvim-neo-tree/neo-tree.nvim'

Plug 'ggandor/lightspeed.nvim'

call plug#end()

" Tab settings
" set cindent
set autoindent
set smartindent
set expandtab
set tabstop=2
set shiftwidth=2

syntax on
filetype plugin on
filetype indent on

set termguicolors
set guicursor=

let g:gruvbox_italics=1
let g:gruvbox_invert_selection=0
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_contrast_light='medium'
let g:gruvbox_guisp_fallback='fg'
set background=dark
colorscheme gruvbox

" Search options
set hlsearch
set incsearch
set ignorecase
set smartcase
set inccommand=nosplit

set encoding=utf-8
set scrolloff=3
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ruler
set backspace=indent,eol,start
set laststatus=3
set number
set virtualedit=all

set modelines=0
set wrap
set textwidth=85
set formatoptions=qrn1
set colorcolumn=85
set title
set lazyredraw
set splitright
set splitbelow
set signcolumn=number

" Shorten updatetime for CoC
set updatetime=400

" Set path for find command
set path=.,/usr/include,,**

" Don't move the cursor to the first column during row traversals
set nostartofline

" Configure diff algorithm to be a little more ergonomic
set diffopt+=algorithm:histogram,indent-heuristic,hiddenoff

" Backup & Undo settings
set undodir=~/.nvim/undodir//
set backupdir=~/.nvim/backup//
set undofile
set undolevels=1000
set undoreload=10000

set ssop-=options   " do not store global and local values in session
set ssop-=folds     " do not store folds in the session

" Navigation of folded lines
map j gj
map k gk

" Fold based on the syntax of the file, but only fold the outer level
set foldnestmax=1
set foldmethod=syntax

let g:fastfold_fold_command_suffixes = []

" Press Space to turn off highlighting and clear any message already displayed.
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
nnoremap ' `
nnoremap ` '

" Remove menu
set go=c

" {{{ Leader Mappings
" Quick navigation of tabs
map <leader>th :tabprev<CR>
map <leader>tl :tabnext<CR>
map <leader>tn :tabnew<CR>
map <leader>td :tabclose<CR>

" Faster way to switch between splits
map <leader>w <C-w>w
map <leader>h <C-w>h
map <leader>j <C-w>j
map <leader>k <C-w>k
map <leader>l <C-w>l

" Remove trailing whitespace
function! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

map <silent> <leader>s :call StripTrailingWhitespaces() <CR>

" Invoke telescope's live-grep
map <silent> <leader>lg :lua require('telescope.builtin').live_grep() <CR>
map <silent> <leader>ff :lua require('telescope.builtin').find_files() <CR>

" }}}

" Complete options (disable preview scratch window)
set completeopt=menu,menuone,longest

" Limit popup menu height
set pumheight=15

" Key Maps
" --------
" Use Y to copy until the end of the line. Use yy to copy the whole line.
nnoremap Y y$

set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%5*%{&ff}%*            "file format
set statusline +=%3*%y%*                "file type
set statusline +=%4*\ %<%F%*            "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%6v\ %*             "virtual column number
set statusline +=%2*0x%04B\ %*          "character under cursor

" Highlighting for trailing whitespace and abnormal indentation
set listchars=tab:>-,trail:·,extends:>,precedes:<
set list

" Interrobangs...
digraph !? 8253
digraph ?! 8253

" {{{ CTAGS
set tags=./ctags;
" }}}

" {{{ Terminal mode configuration
let g:terminal_color_0  = '#282828'
let g:terminal_color_1  = '#cc241d'
let g:terminal_color_2  = '#98971a'
let g:terminal_color_3  = '#d79921'
let g:terminal_color_4  = '#458588'
let g:terminal_color_5  = '#b16286'
let g:terminal_color_6  = '#689d6a'
let g:terminal_color_7  = '#a89984'
let g:terminal_color_8  = '#928374'
let g:terminal_color_9  = '#fb4934'
let g:terminal_color_10 = '#b8bb26'
let g:terminal_color_11 = '#fabd2f'
let g:terminal_color_12 = '#83a598'
let g:terminal_color_13 = '#d3869b'
let g:terminal_color_14 = '#8ec07c'
let g:terminal_color_15 = '#ebdbb2'
let g:terminal_scrollback_buffer_size=100000

tnoremap <Leader><ESC> <C-\><C-n>
tnoremap <Leader>w <C-\><C-n><C-w>w

highlight TermCursor guifg=#cc241d

set scrollback=-1
" }}}

" {{{ netrw configuration
let g:netrw_liststyle=3
let g:netrw_winsize=10
let g:netrw_alto=1
let g:netrw_sort_sequence = '[\/]$,\<core\%(\.\d\+\)\=,\.[a-np-z]$,*,\.o$,\.obj$,\.info$,\.swp$,\.bak$,\~$'
" }}}

" {{{ Deoplete configuration
" let g:deoplete#enable_at_startup = 1
" }}}

" {{{ Quick buffer manipulation
nnoremap gb :ls<CR>:buffer<Space>
nnoremap gB :ls<CR>:sbuffer<Space>
nnoremap ,b :buffer *
nnoremap ,B :sbuffer *
" }}}

" {{{ Delete old undo files
let s:undos = split(globpath(&undodir, '*'), "\n")
call filter(s:undos, 'getftime(v:val) < localtime() - (60 * 60 * 24 * 90)')
call map(s:undos, 'delete(v:val)')
" }}}

let g:python3_host_prog = '/mathworks/home/sbauman/src/dotfiles/nvim/pypynvim3/bin/python3'

" {{{ Lightline config
let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ 'active' : {
  \   'left' : [['mode', 'paste'], ['readonly', 'filename']]
  \ },
  \ 'component_function': {
  \   'filename': 'LightlineFilename',
  \ },
  \ }

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:.') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

" }}}

" {{{ Coc related bindings
"" Remap keys for gotos
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" derived
nmap <silent> <leader>gc :call CocLocations('ccls','$ccls/inheritance',{'derived': v:true})<cr>

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" }}}

" {{{ nvim-tree
let g:nvim_tree_quit_on_open = 0 "0 by default, closes the tree when you open a file
let g:nvim_tree_indent_markers = 1 "0 by default, this option shows indent markers when folders are open
let g:nvim_tree_git_hl = 1 "0 by default, will enable file highlight for git attributes (can be used without the icons).
let g:nvim_tree_highlight_opened_files = 1 "0 by default, will enable folder and file icon highlight for opened files/directories.
let g:nvim_tree_root_folder_modifier = ':~' "This is the default. See :help filename-modifiers for more options
let g:nvim_tree_add_trailing = 1 "0 by default, append a trailing slash to folder names
let g:nvim_tree_group_empty = 1 " 0 by default, compact folders that only contain a single folder into one node in the file tree
let g:nvim_tree_disable_window_picker = 1 "0 by default, will disable the window picker.
let g:nvim_tree_icon_padding = ' ' "one space by default, used for rendering the space between the icon and the filename. Use with caution, it could break rendering if you set an empty string depending on your font.
let g:nvim_tree_symlink_arrow = ' >> ' " defaults to ' ➛ '. used as a separator between symlinks' source and target.
let g:nvim_tree_respect_buf_cwd = 0 "0 by default, will change cwd of nvim-tree to that of new buffer's when opening nvim-tree.
let g:nvim_tree_create_in_closed_folder = 0 "1 by default, When creating files, sets the path of a file when cursor is on a closed folder to the parent folder when 0, and inside the folder when 1.
let g:nvim_tree_refresh_wait = 500 "1000 by default, control how often the tree can be refreshed, 1000 means the tree can be refresh once per 1000ms.
let g:nvim_tree_window_picker_exclude = {
    \   'filetype': [
    \     'notify',
    \     'packer',
    \     'qf'
    \   ],
    \   'buftype': [
    \     'terminal'
    \   ]
    \ }
" Dictionary of buffer option names mapped to a list of option values that
" indicates to the window picker that the buffer's window should not be
" selectable.
let g:nvim_tree_special_files = { 'README.md': 1, 'Makefile': 1, 'MAKEFILE': 1 } " List of filenames that gets highlighted with NvimTreeSpecialFile
let g:nvim_tree_show_icons = {
    \ 'git': 1,
    \ 'folders': 0,
    \ 'files': 0,
    \ 'folder_arrows': 0,
    \ }
"If 0, do not show the icons for one of 'git' 'folder' and 'files'
"1 by default, notice that if 'files' is 1, it will only display
"if nvim-web-devicons is installed and on your runtimepath.
"if folder is 1, you can also tell folder_arrows 1 to show small arrows next to the folder icons.
"but this will not work when you set indent_markers (because of UI conflict)

" default will show icon by default if no icon is provided
" default shows no icon by default
let g:nvim_tree_icons = {
    \ 'default': '',
    \ 'symlink': '',
    \ 'git': {
    \   'unstaged': "✗",
    \   'staged': "✓",
    \   'unmerged': "",
    \   'renamed': "➜",
    \   'untracked': "★",
    \   'deleted': "",
    \   'ignored': "◌"
    \   },
    \ 'folder': {
    \   'arrow_open': "",
    \   'arrow_closed': "",
    \   'default': "",
    \   'open': "",
    \   'empty': "",
    \   'empty_open': "",
    \   'symlink': "",
    \   'symlink_open': "",
    \   }
    \ }
" }}}

lua << EOF
    local parser_configs = require('nvim-treesitter.parsers').get_parser_configs()

    parser_configs.norg = {
        install_info = {
            url = "https://github.com/nvim-neorg/tree-sitter-norg",
            files = { "src/parser.c", "src/scanner.cc" },
            branch = "main"
        },
    }

    parser_configs.norg_meta = {
        install_info = {
            url = "https://github.com/nvim-neorg/tree-sitter-norg-meta",
            files = { "src/parser.c" },
            branch = "main"
        },
    }

    parser_configs.norg_table = {
        install_info = {
            url = "https://github.com/nvim-neorg/tree-sitter-norg-table",
            files = { "src/parser.c" },
            branch = "main"
        },
    }

    require('nvim-treesitter.configs').setup {
        --ensure_installed = { "norg", "norg_meta", "norg_table", "haskell", "cpp", "c", "javascript", "vim", "lua" },
        ensure_installed = "all",
        ignore_install = {}, -- List of parsers to ignore installing
        highlight = {
          enable = true,              -- false will disable the whole extension
          disable = {},  -- list of language that will be disabled
          -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
          -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
          -- Using this option may slow down your editor, and you may see some duplicate highlights.
          -- Instead of true it can also be a list of languages
          additional_vim_regex_highlighting = true,
        },
    }

    require('neorg').setup {
        -- Tell Neorg what modules to load
        load = {
            ["core.defaults"] = {}, -- Load all the default modules
            ["core.norg.concealer"] = {
                config = {
                    markup = {
                        enabled = true
                    },
                    icon_preset = "diamond"
                }
            }, -- Allows for use of icons
            ["core.norg.completion"] = {
                config = {
                    engine = "nvim-cmp" -- We current support nvim-compe and nvim-cmp only
                }
            },
            ["core.presenter"] = {
                config = {
                    zen_mode = "zen-mode"
                },
            },
            ["core.norg.dirman"] = {
                config = {
                  workspaces = {
                    work = "~/Notes/work",
                    personal = "~/Notes/personal"
                  }
                }
            },
            ["core.integrations.telescope"] = {}, -- Enable the telescope module
            ["core.gtd.base"] = {
                config = {
                    workspace = "default"
                },
                projects = {
                    show_completed_projectes = false,
                    show_projects_without_tasks = false
                }
            },
            ["core.gtd.ui"] = {},
            ["core.keybinds"] = { -- Configure core.keybinds
                config = {
                  default_keybinds = true, -- Generate the default keybinds
                  neorg_leader = "<Leader>o" -- This is the default if unspecified
                }
            },
            ["core.norg.qol.toc"] = { },
            ["core.export"] = { },
            ["core.export.markdown"] = {
                config = {
                    extensions = "all",
                }
            },
            ["core.norg.journal"] = {
                config = {
                    journal_folder = "journal",
                    strategy = "flat"
                }
            },
        },
    }

    -- Setup nvim-cmp.
    local cmp = require'cmp'

    cmp.setup({
      snippet = { },
      mapping = {
        ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
        ['<C-e>'] = cmp.mapping({
          i = cmp.mapping.abort(),
          c = cmp.mapping.close(),
        }),
      },
      sources = cmp.config.sources({
        { name = 'neorg' },
        { name = 'buffer' }
      }, {
        { name = 'buffer' },
      })
    })

    require('telescope').setup({})

    require('telescope').load_extension('media_files')
    require('spellsitter').setup {
      enable = true,
    }

  require("neo-tree").setup{ }

  require("zen-mode").setup {
    window = {
      width = 90,
      options = {
        number = false
      }
    }
  }

EOF


